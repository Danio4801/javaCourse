	Day 1
JDK-java development kit - it is required, java complier
Java (number) sometimes have lts, it means long time support 
For example java 17 is lts

jshell
We can use "jshell" commnad in the termianl and by that we can basically perform simple math in the terminal.
We can also use method print()
Example of use:
System.out.print(6); or System.out.print("Hello world"); or System.out.print('a');


VSC manuals 
How to compile java code in VSC:
open terminal -> javac filename.extension 
for example: javac Hello.java

How to run already complied code in VSC:
open terimal -> java classname
for example: java Hello



Theory:
Java is platform independent because of JVM. JVM is required to make use of java files. JVM makes sure that code will work in system platform.

Hardware <-> OS < JRE (java runtime environment, JVM inside JRE ) > JVM (translator) <-> Complier <-> Java code.
Layres:
(((JVM)JRE)JDK) (jdk is the biggest, outside layer). JDK is not required for example in our friends comp after finishing project, that's why java
is called WORA which means "Write once, run anywhere".(if u have JVM and JRE (java runtime environment) installed.

!In short JDK contains JRE and JRE contains JVM

Java code needs to be converted to byte code by complier for JVM. 

JVM need to be build for particular OS. JVM only understand Byte code. 

Whether we have 1 java file or 39024 of files we have to tell JVM which file should be checked first, the file should've contain main method. 
The execution will start with the first file, file that we specified and that file need to have main method, some kind of signature. 
The signature (JVM is looking for):
public static void main (String a[])

After all this steps we will see our code output, our code working. 

Java is an object oriented language. In short it means that everything should be an object and to create object we need a class


	Day 2 
We are basically doing processing on data, programming and fixing real life problems is just processing data.

We (always) work with data but how to store data?
We use database for storing data - database is permanent storage, it stays in the machine, but when we receive data from the user we want to process it. 
How to do it? Well, we need to store data somewhere while processing and the "place" is called variable(s).
We can imagine variable as a (storage) box, that box have certain type and unique name.
Java is strongly typed language which means it demands the specification of data types.

Data types:
There are two data types: primitive and 
1)Primitive 
-Integer:
byte(1 byte), short(2 bytes), int(4bytes), long(8bytes)(!L at the end required, example: long l = 324l;)   ( <-- different sizes (range(s) of int)
-Float:
double(8 bytes)(default value in java), float(4 bytes)
It means if we DO NOT want to use default double but float we have to mention it,
so the syntactic should like like this: float num = 5.6f; !with extra f at the end!;
-Character:
char(2 bytes)(java by default support the unicode, not the ascii)
-Boolean:
boolean(true or false)(java does not support 0 and 1, it's only true or false)

2)Special types:
String - special type in java, combination of different characters


How to calculate range of certain data type?
example:
byte (1 byte) so it's -2^7 to (2^7) - 1; -128 to 127


	Day 3
What if we want to change the type of the variable?
Well, we cant do that but we can assign value to the new variable with different type. 

We can always assign the value to a bigger range variable, like byte b; int a; a = b; but not the other way around.

But what if we really want to assign value of the int to a byte?
We can perform such operation like this: b = (desired type) a; 
This concept is called casting, in this case it is explicit casting.

What will happen if we decide to assign value like 257 (type int) to the byte type?
Math scheme:
(value) mod (full range of chosen type) 
257 % 256 (ans:1)

What is conversion?
In short conversion is an automatic casting.

What is type promotion?
Type promotion:
byte a = 10;
byte b = 30;
int result = a*b;
We are performing operation on byte; 10*30 will be out of byte range but since we assign the result of the operation 
to int. Java auto promotes a and b to int.


	Day 4
Assignment operators:
We can +, -, * and / variables . 
If we want to get remainder we have to use % (mod operator). example 7%5 (ans:2)


num1++; and ++num1; - the difference: 
num1++; post - increment 
++num1; pre - increment 
This 2 operations works differently when we try to fetch the value.

Example: 
int num  7;
int result = ++num;
The incremented value is being assigned to the "result", the result is eight and num is equal to eight as well.

int num  7;
int result = num++; //fetch the value and then increment (2 statements)
The result is seven and the num is equal to 8. 
Why? First we fetch the value of num1 (seven), assign it to result (integer result is equal to seven),
and then we increment the variable result so the num is equal to eight.


Combing conditions - relational operators 
less than ,greater than: <, >, 
equal to: ==, 
not equal: !=,
true -> false : !,
less than or equal to, greater than or equal to: <=, >=, 


&& - and 
|| - or
! - not 


Conditional statements: 
If we want to utilise only some part of the code based of condition we can use:
if -  instruction: it's important to note that if does not care what's inside the curly brackets, 
if just wants to know is it true or false so we can even write smth like: if(true) and it's okay, will work.
We do not have to use {} for 1 line instructions, example:
if (true) 
System.out.print("Hi");

same truth applies with else (remember, else cannot be alone) 
if (true) 
System.out.print("Hi");
else
System.out.print("Bye");

So if we have only one instruction after each condition the {} isn't  required for code to work. 



	Day 5
Question mark and colon in java (ternary operator):
We have to use ? and : .
int result = n%2 == 0?10:20; 
Explanation: 
n%2 == 0 might return true or false so we can put the question mark, we can ask is it true or false.
If it is true we can execute the part after the question mark, if it is false code after colon will be executed.
If true, the value of the result will be 10. If n%2 != then the value will be 20.
 

Switch statement: 
example:
switch(passed value / value of the variable)
{
	case value (this value will be compared to passed value): //bunch on instruction 
	case 2: //bunch on instruction 
	case 3: //bunch on instruction 
	case 4: //bunch on instruction 
}
If the passed value match with lets say case 2, code from case 3 and 4 will be also executed,
because switch statement is like, "cool, the value matched, now i can carry on without checking again".
We can prevent situation like this by using break.
example:
int num = 2;
switch(num)
{
	case 2: 
		//bunch on instructions
	 	break;
	case 3: 
			//bunch on instructions
	 		break;	
	case 4: 
			//bunch on instructions
	 		break;	
}
After the match, the switch will break which will result in escaping from another and another case.

Ok, cool, but what if the value is not equal to 2, 3 or 4?
We can use "default case", example: 
int num = 2;
switch(num)
{
	case 2: 
		//bunch on instruction
	 	break;
	case 3: 
			//bunch on instructions
	 		break;	
	case 4: 
			//bunch on instructions
	 		break;
	default: //will be executed if none of the above matches the num value
			//bunch on instructions
	 		break;			
}

	Day 6	
We can use "+" to concatenate 2 things:
example:
int i = 0;
System.out.println("Hi" + i);


Loops - loops let us recreate the same thing multiple times
Types of loops:
while, do - while, for.
(more about loops in the CS50 Week 1 C shorts notes in "Loops" section)

OOP - object oriented programming (more in Demo code):
Uncompleted notes:xs
// Object - properties and behaviours 

example: me, (as a human)
properties - what I know 
methods (behaviours) - what I do

How to create an object?
In order to create an object first we have to create a class.


Technical info:
JVM - creates object in java
JVM needs a blueprint, a classfile. We have to make the classfile.
We are designing and JVM is just a manufacture, 
just like Apple - designed in California, assembled in China. 

	Day 7
Method always has to return something!
The moment the method sees return it will jump out of the method,
it will not execute the other statement.


We can have methods with the same name, the only requirement is different parameters(different name, value of parameters or type of parameters.
This idea is called "method overloading".

How does JVM memory works:
Inside JVM memory: 
last in - first out - this is called stack (memory)(stos)
we also have heap (sterta) - open space
Every method has it's own stack

Array
Once we declare size of the array we have to stick to it.

example of array (can store up to 3 values)
int num1[] = new int[4]; // size is fixed 
all the values by default are 0 (in the array show above)
 
Multidimensional arrays:
example:
int num[][] = new int[3][4];
[number of arrays][number of spots inside each array]


For each loop:
example: 
int numbers[] = {0, 1, 2};
for(int i : numbers) //i - temp variable :(colon) collection of variables
{
System.out.println(x)
}
ChatGPT note:
petla for each sluzy do iteracji przez elementy tablicy lub innej kolekcji w jezyku java.
Jest bardzo wygodna i czytelna forma petli, ktora automatycznie przechodzi przez wszystkie elementy w kolekcji 
bez koniecznosci recznego zarzadania indeksami:
schemat:
for(typ_elementu zmienna: kolekcja)
{
//kod ktory operuje na zmiennej 
} 

